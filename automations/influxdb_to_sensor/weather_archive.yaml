---
id: "influx2entity_weatherarchive"
alias: "[InfluxDB to Entity] Weather Archive"
description: "[InfluxDB to Entity] Weather Archive"
trigger:
  - platform: homeassistant
    event: start
  - platform: time_pattern
    hours: "/1"
condition: []
action:
  - service: pyscript.influxdb2_query_to_entity
    data:
      entity_id: sensor.archive_homeoutsidetemp_max_30day
      unit_of_measurement: °C
      friendly_name: Home - Month - Max Temp
      icon: "mdi:thermometer"
      query: >-
        import "timezone" option location = timezone.location(name:
        "Australia/Sydney") from(bucket: "homeassistant")
          |> range(start: -1mo)
          |> filter(fn: (r) => r["_measurement"] == "°C")
          |> filter(fn: (r) => r["entity_id"] == "tempest_st_00056115_temperature")
          |> filter(fn: (r) => r["_field"] == "value")
          |> drop(columns: ["friendly_name"])
          |> aggregateWindow(every: 1d, fn: max, createEmpty: false)
          |> fill(value: 0.0)
          |> yield(name: "max")
  - service: pyscript.influxdb2_query_to_entity
    data:
      entity_id: sensor.archive_homeoutsidetemp_min_30day
      unit_of_measurement: °C
      friendly_name: Home - Month - Min Temp
      icon: "mdi:thermometer"
      query: >-
        import "timezone" option location = timezone.location(name:
        "Australia/Sydney") from(bucket: "homeassistant")
          |> range(start: -1mo)
          |> filter(fn: (r) => r["_measurement"] == "°C")
          |> filter(fn: (r) => r["entity_id"] == "tempest_st_00056115_temperature")
          |> filter(fn: (r) => r["_field"] == "value")
          |> drop(columns: ["friendly_name"])
          |> aggregateWindow(every: 1d, fn: min, createEmpty: false)
          |> fill(value: 0.0)
          |> yield(name: "min")
  - service: pyscript.influxdb2_query_to_entity
    data:
      query: >-
        import "timezone" option location = timezone.location(name:
        "Australia/Sydney") from(bucket: "homeassistant")
          |> range(start: -1mo)
          |> filter(fn: (r) => r["_measurement"] == "mm")
          |> filter(fn: (r) => r["entity_id"] == "tempest_st_00056115_rain_today")
          |> filter(fn: (r) => r["_field"] == "value")
          |> drop(columns: ["friendly_name"])
          |> aggregateWindow(every: 1d, fn: max, createEmpty: false)
          |> fill(value: 0.0)
          |> yield(name: "max")
      entity_id: sensor.archive_homerain_30day
      unit_of_measurement: mm
      friendly_name: Home - Month - Rain
      icon: "mdi:water"
  - service: pyscript.influxdb2_query_to_entity
    data:
      query: >-
        import "timezone" option location = timezone.location(name: "Australia/Sydney")
        from(bucket: "homeassistant")
          |> range(start: -1y)
          |> filter(fn: (r) => r["_measurement"] == "mm")
          |> filter(fn: (r) => r["entity_id"] == "weather_precipitation_today")
          |> filter(fn: (r) => r["_field"] == "value")
          |> drop(columns: ["friendly_name"])
          |> filter(fn: (r) => r._value != 0.00)
          |> aggregateWindow(every: 1d, fn: last, createEmpty: false)
          |> aggregateWindow(every: 1w, fn: sum, createEmpty: false)
          |> yield()
      entity_id: sensor.weather_archive_precipitation_weekly
      unit_of_measurement: mm
      friendly_name: "[Weather] Weekly Precipitation (Last Year)"
      icon: "mdi:water"
  - service: pyscript.influxdb2_query_to_entity
    data:
      query: >-
        import "timezone" option location = timezone.location(name: "Australia/Sydney")
        from(bucket: "homeassistant")
          |> range(start: -1y)
          |> filter(fn: (r) => r["_measurement"] == "mm")
          |> filter(fn: (r) => r["entity_id"] == "weather_precipitation_today")
          |> filter(fn: (r) => r["_field"] == "value")
          |> drop(columns: ["friendly_name"])
          |> filter(fn: (r) => r._value != 0.00)
          |> aggregateWindow(every: 1d, fn: last, createEmpty: false)
          |> aggregateWindow(every: 1mo, fn: sum, createEmpty: false)
          |> yield()
      entity_id: sensor.weather_archive_precipitation_monthly
      unit_of_measurement: mm
      friendly_name: "[Weather] Monthly Precipitation (Last Year)"
      icon: "mdi:water"
  - service: pyscript.influxdb2_query_to_entity
    data:
      query: >-
        import "timezone" option location = timezone.location(name: "Australia/Sydney")
        from(bucket: "homeassistant")
          |> range(start: -1y)
          |> filter(fn: (r) => r["_measurement"] == "°C")
          |> filter(fn: (r) => r["entity_id"] == "weather_temperature")
          |> filter(fn: (r) => r["_field"] == "value")
          |> drop(columns: ["friendly_name"])
          |> filter(fn: (r) => r._value != 0.00)
          |> aggregateWindow(every: 1d, fn: max, createEmpty: false)
          |> aggregateWindow(every: 1mo, fn: max, createEmpty: false)
          |> yield()
      entity_id: sensor.weather_archive_temperature_maximum_monthly
      unit_of_measurement: °C
      icon: "mdi:thermometer"
      friendly_name: "[Weather] Monthly Maximum Temperature (Last Year)"
  - service: pyscript.influxdb2_query_to_entity
    data:
      query: >-
        import "timezone" option location = timezone.location(name: "Australia/Sydney")
        from(bucket: "homeassistant")
          |> range(start: -1y)
          |> filter(fn: (r) => r["_measurement"] == "°C")
          |> filter(fn: (r) => r["entity_id"] == "weather_temperature")
          |> filter(fn: (r) => r["_field"] == "value")
          |> drop(columns: ["friendly_name"])
          |> filter(fn: (r) => r._value != 0.00)
          |> aggregateWindow(every: 1d, fn: max, createEmpty: false)
          |> aggregateWindow(every: 1w, fn: max, createEmpty: false)
          |> yield()
      entity_id: sensor.weather_archive_temperature_maximum_weekly
      unit_of_measurement: °C
      icon: "mdi:thermometer"
      friendly_name: "[Weather] Weekly Maximum Temperature (Last Year)"
  - service: pyscript.influxdb2_query_to_entity
    data:
      query: >-
        import "timezone" option location = timezone.location(name: "Australia/Sydney")
        from(bucket: "homeassistant")
          |> range(start: -1y)
          |> filter(fn: (r) => r["_measurement"] == "°C")
          |> filter(fn: (r) => r["entity_id"] == "weather_temperature")
          |> filter(fn: (r) => r["_field"] == "value")
          |> drop(columns: ["friendly_name"])
          |> filter(fn: (r) => r._value != 0.00)
          |> aggregateWindow(every: 1d, fn: min, createEmpty: false)
          |> aggregateWindow(every: 1mo, fn: min, createEmpty: false)
          |> yield()
      entity_id: sensor.weather_archive_temperature_minimum_monthly
      unit_of_measurement: °C
      icon: "mdi:thermometer"
      friendly_name: "[Weather] Monthly Minimum Temperature (Last Year)"
  - service: pyscript.influxdb2_query_to_entity
    data:
      query: >-
        import "timezone" option location = timezone.location(name: "Australia/Sydney")
        from(bucket: "homeassistant")
          |> range(start: -1y)
          |> filter(fn: (r) => r["_measurement"] == "°C")
          |> filter(fn: (r) => r["entity_id"] == "weather_temperature")
          |> filter(fn: (r) => r["_field"] == "value")
          |> drop(columns: ["friendly_name"])
          |> filter(fn: (r) => r._value != 0.00)
          |> aggregateWindow(every: 1d, fn: min, createEmpty: false)
          |> aggregateWindow(every: 1w, fn: min, createEmpty: false)
          |> yield()
      entity_id: sensor.weather_archive_temperature_minimum_weekly
      unit_of_measurement: °C
      icon: "mdi:thermometer"
      friendly_name: "[Weather] Weekly Minimum Temperature (Last Year)"
mode: single
