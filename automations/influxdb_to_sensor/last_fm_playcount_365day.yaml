---
id: "influx2entity_lastfmplaycount365day"
alias: "InfluxDB to Entity: 365 Day LastFM Playcount"
description: "InfluxDB to Entity: 365 Day LastFM Playcount"
mode: restart
max_exceeded: warning
trigger:
  - platform: homeassistant
    id: startup
    event: start

  - platform: state
    entity_id: input_boolean.ha_startup_pending
    to: "off"

  - platform: time_pattern
    hours: "/1"

action:
  - if: "{{ trigger.id == 'startup' }}"
    then:
      - delay: 240
  - service: pyscript.influxdb2_query_to_entity
    data:
      query: >-
        import "timezone" option location = timezone.location(name:"Australia/Sydney") from(bucket: "homeassistant")
          |> range(start: -1y)
          |> filter(fn: (r) => r["entity_id"] == "lastfm_user_playcount")
          |> filter(fn: (r) => r["_field"] == "value")
          |> drop(columns: ["friendly_name"])
          |> filter(fn: (r) => r._value != 0.0 )
          |> aggregateWindow(every: 1d, fn: last, createEmpty: true)
          |> fill(usePrevious: true)
          |> yield(name: "last")
      entity_id: sensor.archive_last_fm_playcount_365day
      unit_of_measurement: Songs
      friendly_name: Last.fm - Playcount - 365 Day
      icon: "si:lastfm"
  - service: pyscript.influxdb2_query_to_entity
    data:
      query: >-
        import "timezone" option location = timezone.location(name:"Australia/Sydney") from(bucket: "homeassistant")
          |> range(start: -1y)
          |> filter(fn: (r) => r["entity_id"] == "lastfm_user_playcount")
          |> filter(fn: (r) => r["_field"] == "value")
          |> drop(columns: ["friendly_name"])
          |> filter(fn: (r) => r._value != 0.0 )
          |> aggregateWindow(every: 1d, fn: last, createEmpty: true)
          |> fill(usePrevious: true)
          |> derivative(unit: 1d)
          |> yield(name: "last")
      entity_id: sensor.archive_last_fm_dailyplaycount_365day
      unit_of_measurement: Songs
      friendly_name: Last.fm - Daily Playcount - 365 Day
      icon: "si:lastfm"
