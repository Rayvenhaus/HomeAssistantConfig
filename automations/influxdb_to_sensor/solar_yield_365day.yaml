---
id: "influx2entity_solar365dayyield"
alias: "InfluxDB to Entity: 365 Day Solar Yield"
description: "InfluxDB to Entity: 365 Day Solar Yield"
mode: single
max_exceeded: silent
trigger:
  - platform: homeassistant
    id: startup
    event: start

  - platform: state
    entity_id: input_boolean.ha_startup_pending
    to: "off"

  - platform: time_pattern
    hours: "/1"

action:
  - if: "{{ trigger.id == 'startup' }}"
    then:
      - delay: 240
  - service: pyscript.influxdb2_query_to_entity
    data:
      query: >-
        import "timezone" option location = timezone.location(name:
        "Australia/Sydney") from(bucket: "homeassistant")
          |> range(start: -1y)
          |> filter(fn: (r) => r["_measurement"] == "kWh")
          |> filter(fn: (r) => r["entity_id"] == "sungrowsolar_daily_power_yields")
          |> filter(fn: (r) => r["_field"] == "value")
          |> drop(columns: ["friendly_name"])
          |> aggregateWindow(every: 1d, fn: max, createEmpty: true)
          |> fill(usePrevious: true)
          |> yield(name: "max")
      entity_id: sensor.archive_solar_yield_365day
      unit_of_measurement: kWh
      friendly_name: Solar - 365 Day - Yield
      icon: "mdi:solar-power"
  - service: pyscript.influxdb2_query_to_entity
    data:
      query: >-
        import "timezone" option location = timezone.location(name:
                "Australia/Sydney") from(bucket: "homeassistant")
          |> range(start: -1y)
          |> filter(fn: (r) => r._field == "value")
          |> filter(fn: (r) => r.entity_id == "sungrowsolar_daily_power_yields")
          |> drop(columns: ["friendly_name"])
          |> aggregateWindow(every: 1d, fn: max, createEmpty: true)
          |> movingAverage(n: 7)
          |> fill(usePrevious: true)
          |> keep(columns: ["_time", "_value"])
          |> sort(columns: ["_time"])
      entity_id: sensor.archive_solar_yield_365day_avg
      unit_of_measurement: kWh
      friendly_name: Solar - 365 Day - Yield - Avg
      icon: "mdi:solar-power"

