---
id: "influx2entity_365daychaffeydam"
alias: "InfluxDB to Entity: 365 Day Chaffey Dam"
description: "InfluxDB to Entity: 365 Day Chaffey Dam"
mode: single
max_exceeded: silent
trigger:
  - platform: homeassistant
    id: startup
    event: start

  - platform: state
    entity_id: input_boolean.ha_startup_pending
    to: "off"

  - platform: time_pattern
    hours: "/1"

action:
  - if: "{{ trigger.id == 'startup' }}"
    then:
      - delay: 240
  - service: pyscript.influxdb2_query_to_entity
    data:
      query: >-
        import "timezone" option location = timezone.location(name:
        "Australia/Sydney") from(bucket: "homeassistant")
          |> range(start: -1y)
          |> filter(fn: (r) => r["_measurement"] == "%")
          |> filter(fn: (r) => r["entity_id"] == "waternsw_chaffey_dam_storage")
          |> filter(fn: (r) => r["_field"] == "value")
          |> drop(columns: ["friendly_name"])
          |> aggregateWindow(every: 1d, fn: max, createEmpty: true)
          |> fill(usePrevious: true)
          |> yield(name: "max")
      entity_id: sensor.archive_waternsw_chaffeydam_30day
      unit_of_measurement: "%"
      friendly_name: Chaffey Dam - 365 Day - Percent
      icon: "mdi:water"
  - service: pyscript.influxdb2_query_to_entity
    data:
      query: >-
        import "timezone" option location = timezone.location(name:
        "Australia/Sydney") from(bucket: "homeassistant")
          |> range(start: -1y)
          |> filter(fn: (r) => r["_measurement"] == "%")
          |> filter(fn: (r) => r["entity_id"] == "waternsw_keepit_dam_storage")
          |> filter(fn: (r) => r["_field"] == "value")
          |> drop(columns: ["friendly_name"])
          |> aggregateWindow(every: 1d, fn: max, createEmpty: true)
          |> fill(usePrevious: true)
          |> yield(name: "max")
      entity_id: sensor.archive_waternsw_keepitdam_30day
      unit_of_measurement: "%"
      friendly_name: Keepit Dam - 365 Day - Percent
      icon: "mdi:water"
  - service: pyscript.influxdb2_query_to_entity
    data:
      query: >-
        import "timezone" option location = timezone.location(name:
        "Australia/Sydney") from(bucket: "homeassistant")
          |> range(start: -1y)
          |> filter(fn: (r) => r["_measurement"] == "%")
          |> filter(fn: (r) => r["entity_id"] == "waternsw_split_rock_dam_storage")
          |> filter(fn: (r) => r["_field"] == "value")
          |> drop(columns: ["friendly_name"])
          |> aggregateWindow(every: 1d, fn: max, createEmpty: true)
          |> fill(usePrevious: true)
          |> yield(name: "max")
      entity_id: sensor.archive_waternsw_splitrockdam_30day
      unit_of_measurement: "%"
      friendly_name: Split Rock Dam - 365 Day - Percent
      icon: "mdi:water"

