---
trigger:
  platform: time_pattern
  minutes: "/1"
sensor:
  - name: Weatherman Data
    state: "OK"
    attributes:
      weather_condition_now: >
        {%- set cond_now = state_attr('sensor.weather_forecasts', 'weatherflow_forecast_brisbane_st_hourly')[0].condition %}
        {%- if states('sun.sun') == 'below_horizon' %}
            {% if cond_now == 'sunny' %} night {% elif cond_now == 'partlycloudy' %} night-partly-cloudy {% else %} {{ cond_now }} {% endif %}
        {%- else %}
            {{ cond_now }}
        {%- endif %}
      weather_condition_0: >
        {%- set cond0 = state_attr('sensor.weather_forecasts', 'weatherflow_forecast_brisbane_st_hourly')[0].condition %}
        {%- set next_setting = as_timestamp(state_attr('sun.sun', 'next_setting')) %}
        {%- set next_rising = as_timestamp(state_attr('sun.sun', 'next_rising')) %}
        {%- set cond0_time = as_timestamp(state_attr('sensor.weather_forecasts', 'weatherflow_forecast_brisbane_st_hourly')[0].datetime) %}
        {%- if cond0_time < next_rising and next_rising < next_setting %}
            {% if cond0 == 'sunny' %} night {% elif cond0 == 'partlycloudy' %} night-partly-cloudy {% else %} {{ cond0 }} {% endif %}
        {%- else %}
            {{ cond0 }}
        {%- endif %}
      weather_temperature_0: >
        {{ state_attr('sensor.weather_forecasts', 'weatherflow_forecast_brisbane_st_hourly')[0].temperature | round(0) }}
      weather_timestamp_0: >
        {{ as_timestamp(state_attr('sensor.weather_forecasts', 'weatherflow_forecast_brisbane_st_hourly')[0].datetime) | timestamp_custom('%I') | int }} {{ as_timestamp(state_attr('sensor.weather_forecasts', 'weatherflow_forecast_brisbane_st_hourly')[0].datetime) | timestamp_custom('%p') }}
      weather_condition_1: >
        {%- set cond1 = state_attr('sensor.weather_forecasts', 'weatherflow_forecast_brisbane_st_hourly')[1].condition %}
        {%- set next_setting = as_timestamp(state_attr('sun.sun', 'next_setting')) %}
        {%- set next_rising = as_timestamp(state_attr('sun.sun', 'next_rising')) %}
        {%- set cond1_time = as_timestamp(state_attr('sensor.weather_forecasts', 'weatherflow_forecast_brisbane_st_hourly')[1].datetime) %}
        {%- if cond1_time < next_rising and next_rising < next_setting %}
            {% if cond1 == 'sunny' %} night {% elif cond1 == 'partlycloudy' %} night-partly-cloudy {% else %} {{ cond1 }} {% endif %}
        {%- else %}
            {{ cond1 }}
        {%- endif %}
      weather_temperature_1: >
        {{ state_attr('sensor.weather_forecasts', 'weatherflow_forecast_brisbane_st_hourly')[1].temperature | round(0) }}
      weather_timestamp_1: >
        {{ as_timestamp(state_attr('sensor.weather_forecasts', 'weatherflow_forecast_brisbane_st_hourly')[1].datetime) | timestamp_custom('%I') | int }} {{ as_timestamp(state_attr('sensor.weather_forecasts', 'weatherflow_forecast_brisbane_st_hourly')[1].datetime) | timestamp_custom('%p') }}
      weather_condition_2: >
        {%- set cond2 = state_attr('sensor.weather_forecasts', 'weatherflow_forecast_brisbane_st_hourly')[2].condition %}
        {%- set next_setting = as_timestamp(state_attr('sun.sun', 'next_setting')) %}
        {%- set next_rising = as_timestamp(state_attr('sun.sun', 'next_rising')) %}
        {%- set cond2_time = as_timestamp(state_attr('sensor.weather_forecasts', 'weatherflow_forecast_brisbane_st_hourly')[2].datetime) %}
        {%- if cond2_time < next_rising and next_rising < next_setting %}
            {% if cond2 == 'sunny' %} night {% elif cond2 == 'partlycloudy' %} night-partly-cloudy {% else %} {{ cond2 }} {% endif %}
        {%- else %}
            {{ cond2 }}
        {%- endif %}
      weather_temperature_2: >
        {{ state_attr('sensor.weather_forecasts', 'weatherflow_forecast_brisbane_st_hourly')[2].temperature | round(0) }}
      weather_timestamp_2: >
        {{ as_timestamp(state_attr('sensor.weather_forecasts', 'weatherflow_forecast_brisbane_st_hourly')[2].datetime) | timestamp_custom('%I') | int }} {{ as_timestamp(state_attr('sensor.weather_forecasts', 'weatherflow_forecast_brisbane_st_hourly')[2].datetime) | timestamp_custom('%p') }}
      weather_condition_3: >
        {%- set cond3 = state_attr('sensor.weather_forecasts', 'weatherflow_forecast_brisbane_st_hourly')[3].condition %}
        {%- set next_setting = as_timestamp(state_attr('sun.sun', 'next_setting')) %}
        {%- set next_rising = as_timestamp(state_attr('sun.sun', 'next_rising')) %}
        {%- set cond3_time = as_timestamp(state_attr('sensor.weather_forecasts', 'weatherflow_forecast_brisbane_st_hourly')[3].datetime) %}
        {%- if cond3_time < next_rising and next_rising < next_setting %}
            {% if cond3 == 'sunny' %} night {% elif cond3 == 'partlycloudy' %} night-partly-cloudy {% else %} {{ cond3 }} {% endif %}
        {%- else %}
            {{ cond3 }}
        {%- endif %}
      weather_temperature_3: >
        {{ state_attr('sensor.weather_forecasts', 'weatherflow_forecast_brisbane_st_hourly')[3].temperature | round(0) }}
      weather_timestamp_3: >
        {{ as_timestamp(state_attr('sensor.weather_forecasts', 'weatherflow_forecast_brisbane_st_hourly')[3].datetime) | timestamp_custom('%I') | int }} {{ as_timestamp(state_attr('sensor.weather_forecasts', 'weatherflow_forecast_brisbane_st_hourly')[3].datetime) | timestamp_custom('%p') }}
      humidity: >
        {{ states('sensor.weather_humidity') | round(0) }}
      barometric_pressure: >
        {{ states('sensor.weather_barometric_pressure') | round(0) }}
      # pressure_trend: >
      #   {% set pressure_trend = states('sensor.stratford_tendency') %}
      #   {{ pressure_trend }}
      wind_bearing: >
        {{ states('sensor.weather_wind_bearing') | round(0) }}
      wind_speed: >
        {{ states('sensor.weather_wind_speed') | round(0) }}
      uv_index: >
        {{ states('sensor.weather_uv_index') | round(1) }}
      aqhi: >
        {{ states('sensor.waqi_air_quality_index') | round(1) }}
      visibility: >
        {{ states('sensor.weather_visibility') | round(1) }}
      moon_phase: >
        {{ states('sensor.moon') }}
      sun_position: >
        {%- set position_now = states('sun.sun') %}
        {{ position_now }}
      sunrise_time: >
        {{ as_timestamp(state_attr('sun.sun', 'next_rising')) | timestamp_custom('%I:%M') }}
      sunset_time: >
        {{ as_timestamp(state_attr('sun.sun', 'next_setting')) | timestamp_custom('%I:%M') }}
      weather_alert: >
        {%- set weather_alert = states('sensor.east_tamworth_warnings') %}
        {{ weather_alert | int }}
