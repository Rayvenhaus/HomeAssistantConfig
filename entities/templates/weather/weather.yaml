---
binary_sensor:
  - name: "[Weather] Is Raining"
    unique_id: weather_is_raining
    icon: mdi:weather-pouring
    state: "{{ is_state('sensor.weather_precipitation_type', 'rain') }}"
    availability: "{{ has_value('sensor.weather_precipitation_type') }}"
    attributes:
      category: weather

  - name: "[Weather] Is Fair Weather?"
    unique_id: weather_is_fair_weather
    icon: mdi:weather-sunny
    state: >-
      {{ (is_state('sensor.weather_current_condition', 'sunny') or
          is_state('sensor.weather_current_condition', 'partlycloudy')) and
          states('sensor.sun_angle') | float(0) >= -1 }}
    availability: >-
      {{ (is_state('sensor.weather_current_condition', 'sunny') or
          is_state('sensor.weather_current_condition', 'partlycloudy')) and
          has_value('sensor.sun_angle') }}
    attributes:
      category: weather
      provider: >-
        {{ state_attr('sensor.weather_current_condition', 'provider')}}

  - name: "[Weather] Precipitation Active"
    unique_id: weather_precipitation_active
    icon: mdi:weather-pouring
    state: "{{ states('sensor.weather_precipitation_type') != 'none' }}"
    availability: "{{ has_value('sensor.weather_precipitation_type') }}"
    attributes:
      category: weather

  - name: "[Weather] Is Lightning"
    unique_id: weather_is_lightning
    icon: mdi:weather-lightning
    delay_on: 20
    delay_off: 120
    state: >
      {%- if is_state('binary_sensor.connected_weatherflow_cloud','on')
          and has_value('binary_sensor.brisbane_st_binary_sensors_is_lightning') %}
        {{ states('binary_sensor.brisbane_st_binary_sensors_is_lightning') }}
      {%- endif %}
    availability: >
      {{ has_value('binary_sensor.brisbane_st_binary_sensors_is_lightning') }}
    attributes:
      category: weather
      provider: >
        {%- if is_state('binary_sensor.connected_weatherflow_cloud','on')
          and has_value('binary_sensor.brisbane_st_binary_sensors_is_lightning') %}
          Weatherflow (Cloud)
        {%- endif %}

sensor:
  - name: "[Weather] Summary"
    unique_id: weather_summary
    icon: mdi:weather-partly-snowy-rainy
    state: ""
    attributes:
      category: weather
      content: >
        {%- from 'temperature_level.jinja' import temperature_level %}
        Currently {{ states('sensor.weather_temperature') | round(1) | string + '°' }}, feels like {{ states('sensor.weather_apparent_temperature') | round(1) | string + '°' }}
        Min {{ states('sensor.weather_low_temperature') | round(1) | string + '°' }}, Max {{ states('sensor.weather_high_temperature') | round(1) | string + '°' }}
        Condition: {{ states('sensor.weather_current_condition') }} and {{ temperature_level(states('sensor.weather_temperature') | round(1)) | lower | trim }}
        {%- if states('sensor.weather_next_precipitation_start') != 'No Rain' %}
        Rain expected {{ states('sensor.weather_next_precipitation_start') | as_datetime | as_local()| as_timestamp | timestamp_custom('%H:%M', default='') }}
        {%- else %}
        No Rain Due
        {%- endif %}

  - name: "[Weather] Temperature Level"
    unique_id: weather_temperature_level
    icon: mdi:thermometer-alert
    state: >
      {%- from 'temperature_level.jinja' import temperature_level %}
      {{ temperature_level(states('sensor.weather_temperature') | round(1)) | trim }}
    availability: "{{is_number(states('sensor.weather_temperature'))}}"
    attributes:
      category: weather

  - name: "[Weather] Dewpoint Level"
    unique_id: weather_dewpoint_level
    icon: mdi:thermometer-alert
    state: >
      {%- from 'dewpoint_level.jinja' import dewpoint_level %}
      {{ dewpoint_level(states('sensor.weather_dew_point') | round(1)) | trim }}
    availability: "{{is_number(states('sensor.weather_dew_point'))}}"
    attributes:
      category: weather

  - name: "[Weather] Temperature Trend"
    unique_id: weather_temperature_trend
    icon: >
      {% if is_state(this.entity_id,'Rising') %} mdi:thermometer-chevron-up
      {% elif is_state(this.entity_id,'Falling') %} mdi:thermometer-chevron-down
      {% else %} mdi:thermometer
      {% endif %}
    state: >
      {% if is_state('binary_sensor.temptrend_outdoor_rising','on') %} Rising
      {% elif is_state('binary_sensor.temptrend_outdoor_falling','on') %} Falling
      {% else %} Steady
      {% endif %}
    availability: >
      {{ has_value('binary_sensor.temptrend_outdoor_rising')
          and has_value('binary_sensor.temptrend_outdoor_falling') }}
    attributes:
      category: weather

  - name: "[Weather] Temperature"
    unique_id: weather_temperature
    device_class: temperature
    state_class: measurement
    unit_of_measurement: °C
    state: >
      {% if is_state('binary_sensor.connected_weatherflow_local','on')
          and is_number(states('sensor.st_00056115_temperature')) -%}
        {{ states('sensor.st_00056115_temperature')|float }}
      {%- elif is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_forecast_temperature')) %}
        {{ states('sensor.weatherflow_forecast_temperature')|float }}
      {%- elif is_state('binary_sensor.connected_bureau_of_meteorology', 'on')
          and is_number(states('sensor.tamworth_airport_temp')) %}
        {{ states('sensor.tamworth_airport_temp')|float }}
      {%- else %} 0
      {%- endif %}
    attributes:
      category: weather
      provider: >
        {% if is_state('binary_sensor.connected_weatherflow_local','on')
            and is_number(states('sensor.st_00056115_temperature')) %} Weatherflow (Local)
        {%- elif is_state('binary_sensor.connected_weatherflow_cloud','on')
            and is_number(states('sensor.weatherflow_forecast_temperature')) %} Weatherflow (Cloud)
        {%- elif is_state('binary_sensor.connected_bureau_of_meteorology', 'on')
          and is_number(states('sensor.tamworth_airport_temp')) %} Bureau of Meteorology
        {%- else %} None
        {%- endif %}
    availability: >
      {{ is_state('binary_sensor.connected_weatherflow_cloud','on')
            and is_number(states('sensor.weatherflow_forecast_temperature'))
          or is_state('binary_sensor.connected_weatherflow_local','on')
            and is_number(states('sensor.st_00056115_temperature'))
          or is_state('binary_sensor.connected_bureau_of_meteorology', 'on')
            and is_number(states('sensor.tamworth_airport_temp')) }}

  - name: "[Weather] Apparent Temperature"
    unique_id: weather_apparent_temperature
    device_class: temperature
    state_class: measurement
    unit_of_measurement: °C
    state: >
      {% if is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_forecast_apparent_temperature')) -%}
        {{ states('sensor.weatherflow_forecast_apparent_temperature')|float }}
      {%- elif is_state('binary_sensor.connected_bureau_of_meteorology', 'on')
          and is_number(states('sensor.tamworth_airport_temp_feels_like')) %}
        {{ states('sensor.tamworth_airport_temp_feels_like')|float }}
      {%- else %}
        {{ states('sensor.weather_temperature')|float }}
      {%- endif %}
    attributes:
      category: weather
      provider: >
        {% if is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_forecast_apparent_temperature')) %} Weatherflow (Cloud)
        {%- elif is_state('binary_sensor.connected_bureau_of_meteorology', 'on')
          and is_number(states('sensor.tamworth_airport_temp_feels_like')) %} Bureau of Meteorology
        {%- else %} Outdoor Temp
        {%- endif %}
    availability: >
      {{ is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_forecast_apparent_temperature'))
          or is_state('binary_sensor.connected_bureau_of_meteorology', 'on')
            and is_number(states('sensor.tamworth_airport_temp_feels_like'))
          or is_number(states('sensor.weather_temperature')) }}

  - name: "[Weather] Feels Like Temperature"
    unique_id: "feels_like_temperature"
    unit_of_measurement: "°C"
    state: >-
      {%- set temp = states('sensor.weather_temperature') | float %}
      {%- set humidity = states('sensor.weather_humidity') | float %}
      {%- set wind_speed = states('sensor.weather_wind_speed') | float %}
      {%- set wvp = humidity / 100 * 6.105 * e**(17.27 * temp / (237.7 + temp)) %}
      {{(temp + 0.33 * wvp - 0.70 * wind_speed * 0.277777777777778 - 4.00) | round(2)}}
    state_class: measurement
    icon: mdi:thermometer
    attributes:
      category: weather
      provider: >
        {{ state_attr('sensor.weather_temperature', 'provider') }}
    availability: >
      {{ is_number(states('sensor.weather_temperature'))
          and is_number(states('sensor.weather_humidity'))
          and is_number(states('sensor.weather_wind_speed')) }}

  - name: "[Weather] High Temperature"
    unique_id: weather_high_temperature
    device_class: temperature
    state_class: measurement
    unit_of_measurement: °C
    state: >
      {% if states('sensor.weather_temperature_today_maximum') is defined
          and is_number(states('sensor.weather_temperature_today_maximum')) %}
        {{ states('sensor.weather_temperature_today_maximum')|float }}
      {% elif is_number(states('sensor.tamworth_airport_max_temp')) %}
        {{ states('sensor.tamworth_airport_max_temp')|float }}
      {% endif %}
    attributes:
      category: weather
      provider: >
        {% if states('sensor.weather_temperature_today_maximum') is defined
            and is_number(states('sensor.weather_temperature_today_maximum')) %} Weatherflow (Local)
        {% elif is_number(states('sensor.tamworth_airport_max_temp')) %} Bureau of Meteorology
        {% endif %}
    availability: >
      {{ (states('sensor.weather_temperature_today_maximum') is defined
            and is_number(states('sensor.weather_temperature_today_maximum')))
          or is_number(states('sensor.tamworth_airport_max_temp')) }}

  - name: "[Weather] Low Temperature"
    unique_id: weather_low_temperature
    device_class: temperature
    state_class: measurement
    unit_of_measurement: °C
    state: >
      {% if states('sensor.weather_temperature_today_minimum') is defined
          and is_number(states('sensor.weather_temperature_today_minimum')) %}
        {{ states('sensor.weather_temperature_today_minimum')|float }}
      {% elif is_number(states('sensor.tamworth_airport_min_temp')) %}
        {{ states('sensor.tamworth_airport_min_temp')|float }}
      {% endif %}
    attributes:
      category: weather
      provider: >
        {% if states('sensor.weather_temperature_today_minimum') is defined
            and is_number(states('sensor.weather_temperature_today_minimum')) %} Weatherflow (Local)
        {% elif is_number(states('sensor.tamworth_airport_min_temp')) %} Bureau of Meteorology
        {% endif %}
    availability: >
      {{ (states('sensor.weather_temperature_today_minimum') is defined
            and is_number(states('sensor.weather_temperature_today_minimum')))
          or is_number(states('sensor.tamworth_airport_min_temp')) }}

  - name: "[Weather] Temperature Range"
    unique_id: weather_temperature_range
    device_class: temperature
    state_class: measurement
    unit_of_measurement: °C
    icon: mdi:thermometer-lines
    state: >
      {%- set tmax = states('sensor.weather_high_temperature') | float(0) %}
      {%- set tmin = states('sensor.weather_low_temperature') | float(0) %}
      {{ (tmax - tmin) | round(2) }}
    attributes:
      temperature_updated: "{{ now() | as_local }}"
      category: weather
    availability: >
      {{ has_value('sensor.weather_high_temperature')
          and has_value('sensor.weather_low_temperature') }}

  - name: "[Weather] High Temperature Differential"
    unique_id: weather_high_temperature_differential
    device_class: temperature
    state_class: measurement
    unit_of_measurement: °C
    state: >
      {{ (states('sensor.weather_high_temperature') | float
          - state_attr('sensor.bom_average', 'maxtemp_average') | float) | round(2) }}
    attributes:
      category: weather
      today_temp: "{{states('sensor.weather_high_temperature') | float }}"
      temp_average: "{{state_attr('sensor.bom_average', 'maxtemp_average') | float }}"
      temp_hottest: "{{state_attr('sensor.bom_average', 'maxtemp_hottest') | float }}"
      temp_coldest: "{{state_attr('sensor.bom_average', 'maxtemp_coldest') | float }}"
    availability: >
      {{ is_number(states('sensor.weather_high_temperature'))
          and is_number(state_attr('sensor.bom_average', 'maxtemp_average')) }}

  - name: "[Weather] Low Temperature Differential"
    unique_id: weather_low_temperature_differential
    device_class: temperature
    state_class: measurement
    unit_of_measurement: °C
    state: >
      {%- if is_number(state_attr('sensor.bom_average', 'mintemp_average')) %}
      {{ (states('sensor.weather_low_temperature') | float
          - state_attr('sensor.bom_average', 'mintemp_average') | float) | round(2) }}
      {%- else %}
      N/A
      {%- endif %}
    attributes:
      category: weather
      today_temp: "{{states('sensor.weather_low_temperature') | float('N/A') }}"
      temp_average: "{{state_attr('sensor.bom_average', 'mintemp_average') | float('N/A') }}"
      temp_hottest: "{{state_attr('sensor.bom_average', 'mintemp_hottest') | float('N/A') }}"
      temp_coldest: "{{state_attr('sensor.bom_average', 'mintemp_coldest') | float('N/A') }}"
    availability: >
      {{ is_number(states('sensor.weather_low_temperature'))
          and is_number(state_attr('sensor.bom_average', 'mintemp_average')) }}

  - name: "[Weather] Dew Point"
    unique_id: weather_dew_point
    device_class: temperature
    state_class: measurement
    unit_of_measurement: °C
    state: >
      {% if is_state('binary_sensor.connected_weatherflow_local','on')
            and is_number(states('sensor.st_00056115_dew_point')) -%}
        {{ states('sensor.st_00056115_dew_point')|float|round(2) }}
      {%- elif is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_forecast_dew_point')) %}
        {{ states('sensor.weatherflow_forecast_dew_point')|float|round(2) }}
      {%- elif is_state('binary_sensor.connected_pirateweather', 'on')
          and is_number(states('sensor.pirateweather_dew_point')) %}
        {{ states('sensor.pirateweather_dew_point')|float|round(2) }}
      {%- else %} 0
      {%- endif %}
    attributes:
      category: weather
      provider: >
        {% if is_state('binary_sensor.connected_weatherflow_local','on')
            and is_number(states('sensor.st_00056115_dew_point')) -%} Weatherflow (Local)
        {%- elif is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_forecast_dew_point')) %} Weatherflow (Cloud)
        {%- elif is_state('binary_sensor.connected_pirateweather', 'on')
          and is_number(states('sensor.pirateweather_dew_point')) %} Pirate Weather
        {%- else %} None
        {%- endif %}
    availability: >
      {{ is_state('binary_sensor.connected_weatherflow_local','on')
            and is_number(states('sensor.weatherflow_forecast_dew_point'))
          or is_state('binary_sensor.connected_weatherflow_cloud','on')
            and is_number(states('sensor.st_00056115_dew_point'))
          or is_state('binary_sensor.connected_pirateweather', 'on')
            and is_number(states('sensor.pirateweather_dew_point')) }}

  - name: "[Weather] Humidity"
    unique_id: weather_humidity
    device_class: humidity
    state_class: measurement
    unit_of_measurement: "%"
    state: >
      {% if is_state('binary_sensor.connected_weatherflow_local','on')
          and is_number(states('sensor.st_00056115_humidity')) -%}
        {{ states('sensor.st_00056115_humidity')|int }}
      {%- elif is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_forecast_humidity')) %}
        {{ states('sensor.weatherflow_forecast_humidity')|int }}
      {%- elif is_state('binary_sensor.connected_bureau_of_meteorology', 'on')
          and is_number(states('sensor.tamworth_airport_humidity')) %}
        {{ states('sensor.tamworth_airport_humidity')|int }}
      {%- else %} 0
      {%- endif %}
    attributes:
      category: weather
      provider: >
        {% if is_state('binary_sensor.connected_weatherflow_local','on')
          and is_number(states('sensor.st_00056115_humidity')) -%} Weatherflow (Local)
        {%- elif is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_forecast_humidity')) %} Weatherflow (Cloud)
        {%- elif is_state('binary_sensor.connected_bureau_of_meteorology', 'on')
          and is_number(states('sensor.tamworth_airport_humidity')) %} Bureau of Meteorology
        {%- else %} None
        {%- endif %}
    availability: >
      {{ is_state('binary_sensor.connected_weatherflow_local','on')
          and is_number(states('sensor.weatherflow_forecast_humidity'))
          or is_state('binary_sensor.connected_weatherflow_cloud','on')
            and is_number(states('sensor.st_00056115_humidity'))
          or is_state('binary_sensor.connected_bureau_of_meteorology', 'on')
            and is_number(states('sensor.tamworth_airport_humidity')) }}

  - name: "[Weather] Humidity Today"
    unique_id: weather_humidity_today
    device_class: humidity
    state_class: measurement
    unit_of_measurement: "%"
    state: >
      {%- if is_state('binary_sensor.connected_pirateweather', 'on')
          and is_number(states('sensor.pirateweather_humidity_0d')) %}
        {{ states('sensor.pirateweather_humidity_0d')|float }}
      {%- endif %}
    attributes:
      category: weather
      provider: Pirate Weather
    availability: >
      {{ is_state('binary_sensor.connected_pirateweather', 'on')
          and is_number(states('sensor.pirateweather_humidity_0d')) }}

  - name: "[Weather] Precipitation Probability"
    unique_id: weather_precipitation_probability
    icon: mdi:weather-rainy
    state_class: measurement
    unit_of_measurement: "%"
    state: >
      {% if state_attr('sensor.weather_forecasts', 'weatherflow_daily')[0] is defined
          and state_attr('sensor.weather_forecasts', 'weatherflow_daily')[0].precipitation_probability is defined
          and is_number(state_attr('sensor.weather_forecasts', 'weatherflow_daily')[0]['precipitation_probability']) -%}
        {{ state_attr('sensor.weather_forecasts', 'weatherflow_daily')[0]['precipitation_probability'] | int(-1) }}
      {%- elif is_state('binary_sensor.connected_bureau_of_meteorology', 'on')
          and is_number(states('sensor.east_tamworth_rain_chance_0')) %}
        {{ states('sensor.east_tamworth_rain_chance_0')|int }}
      {%- endif %}
    attributes:
      category: weather
      provider: >
        {% if state_attr('sensor.weather_forecasts', 'weatherflow_daily')[0] is defined
          and state_attr('sensor.weather_forecasts', 'weatherflow_daily')[0].precipitation_probability is defined
          and is_number(state_attr('sensor.weather_forecasts', 'weatherflow_daily')[0]['precipitation_probability']) -%} Weatherflow (Cloud)
        {%- elif is_state('binary_sensor.connected_bureau_of_meteorology', 'on')
          and is_number(states('sensor.east_tamworth_rain_chance_0')) %} Bureau of Meteorology
        {%- endif %}
    availability: >
      {{ is_state('binary_sensor.connected_weatherflow_cloud','on')
            and state_attr('sensor.weather_forecasts', 'weatherflow_daily')[0] is defined
            and state_attr('sensor.weather_forecasts', 'weatherflow_daily')[0].precipitation_probability is defined
            and is_number(state_attr('sensor.weather_forecasts', 'weatherflow_daily')[0]['precipitation_probability'])
          or is_state('binary_sensor.connected_bureau_of_meteorology', 'on')
            and is_number(states('sensor.east_tamworth_rain_chance_0')) }}

  - name: "[Weather] Precipitation Probability Tomorrow"
    unique_id: weather_precipitation_probability_tomorrow
    icon: mdi:weather-rainy
    state_class: measurement
    unit_of_measurement: "%"
    state: >
      {% if state_attr('sensor.weather_forecasts', 'weatherflow_daily')[1] is defined
          and state_attr('sensor.weather_forecasts', 'weatherflow_daily')[1].precipitation_probability is defined
          and is_number(state_attr('sensor.weather_forecasts', 'weatherflow_daily')[1]['precipitation_probability']) -%}
        {{ state_attr('sensor.weather_forecasts', 'weatherflow_daily')[1]['precipitation_probability'] | int(-1) }}
      {%- elif is_state('binary_sensor.connected_bureau_of_meteorology', 'on')
          and is_number(states('sensor.east_tamworth_rain_chance_1')) %}
        {{ states('sensor.east_tamworth_rain_chance_1')|int }}
      {%- endif %}
    attributes:
      category: weather
      provider: >
        {% if state_attr('sensor.weather_forecasts', 'weatherflow_daily')[1] is defined
          and state_attr('sensor.weather_forecasts', 'weatherflow_daily')[1].precipitation_probability is defined
          and is_number(state_attr('sensor.weather_forecasts', 'weatherflow_daily')[1]['precipitation_probability']) -%} Weatherflow (Cloud)
        {%- elif is_state('binary_sensor.connected_bureau_of_meteorology', 'on')
          and is_number(states('sensor.east_tamworth_rain_chance_1')) %} Bureau of Meteorology
        {%- endif %}
    availability: >
      {{ is_state('binary_sensor.connected_weatherflow_cloud','on')
            and state_attr('sensor.weather_forecasts', 'weatherflow_daily')[1] is defined
            and state_attr('sensor.weather_forecasts', 'weatherflow_daily')[1].precipitation_probability is defined
            and is_number(state_attr('sensor.weather_forecasts', 'weatherflow_daily')[1]['precipitation_probability'])
          or is_state('binary_sensor.connected_bureau_of_meteorology', 'on')
            and is_number(states('sensor.east_tamworth_rain_chance_1')) }}

  - name: "[Weather] Precipitation Likely Soon"
    unique_id: weather_precipitation_likely_soon
    icon: mdi:weather-pouring
    state: >
      {%- set time = states('sensor.weather_next_precipitation_start') | as_datetime
          if has_value('sensor.weather_next_precipitation_start') else none %}
      {{ is_state('binary_sensor.weather_precipitation_active','off')
          and time != none and time > now() and time - now() < timedelta(hours=2) }}
    attributes:
      category: weather

  - name: "Precipitation Likely Today"
    unique_id: precipitation_likely_today
    icon: mdi:weather-pouring
    state: >
      {%- set time = states('sensor.weather_next_precipitation_start') | as_datetime
          if has_value('sensor.weather_next_precipitation_start') else none %}
      {{ (time != none and time > now() and time - now() < timedelta(hours=12))
            or states('sensor.weather_precipitation_probability') | int(0) >= 40 }}
    attributes:
      category: weather

  - name: "[Weather] Precipitation Rate"
    unique_id: weather_precipitation_rate
    icon: mdi:weather-pouring
    device_class: precipitation_intensity
    state_class: measurement
    unit_of_measurement: mm/h
    state: >
      {% if is_state('binary_sensor.connected_weatherflow_cloud', 'on')
            and is_number(states('sensor.weatherflow_forecast_precipitation_rate')) -%}
          {{ states('sensor.weatherflow_forecast_precipitation_rate') | float }}
      {%- elif is_state('binary_sensor.connected_pirateweather', 'on')
            and is_number(states('sensor.pirateweather_precip_intensity')) %}
          {{ states('sensor.pirateweather_precip_intensity') | float }}
      {%- endif %}
    attributes:
      category: weather
      provider: >
        {% if is_state('binary_sensor.connected_weatherflow_cloud', 'on')
            and is_number(states('sensor.weatherflow_forecast_precipitation_rate')) -%}
          Weatherflow (Cloud)
        {%- elif is_state('binary_sensor.connected_pirateweather', 'on')
            and is_number(states('sensor.pirateweather_precip_intensity')) %}
          Pirate Weather
        {%- endif %}
    availability: >
      {{ (is_state('binary_sensor.connected_weatherflow_cloud', 'on')
            and is_number(states('sensor.weatherflow_forecast_precipitation_rate')))
          or is_state('binary_sensor.connected_pirateweather', 'on')
            and is_number(states('sensor.pirateweather_precip_intensity')) }}

  - name: "[Weather] Precipitation Intensity"
    unique_id: weather_precipitation_intensity
    icon: mdi:weather-pouring
    state: >
      {% set rate = states('sensor.weather_precipitation_rate')|int %}
      {%- if rate == 0 %} none
      {%- elif rate <= 1.0 %} very light
      {%- elif rate <= 4 %} light
      {%- elif rate <= 15 %} moderate
      {%- elif rate <= 30 %} very heavy
      {%- elif rate <= 50 %} heavy
      {%- else %} violent
      {%- endif %}
    attributes:
      category: weather
      provider: "{{ state_attr('sensor.weather_precipitation_rate', 'provider') }}"
    availability: "{{ is_number(states('sensor.weather_precipitation_rate')) }}"

  - name: "[Weather] Precipitation Duration Today"
    unique_id: weather_precipitation_duration_today
    icon: mdi:timer
    device_class: duration
    state_class: measurement
    unit_of_measurement: min
    state: >
      {% if is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_forecast_precipitation_duration_today')) -%}
        {{ states('sensor.weatherflow_forecast_precipitation_duration_today')|float }}
      {% else %} 0
      {%- endif %}
    attributes:
      category: weather
      provider: >
        {% if is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_forecast_precipitation_duration_today')) -%} Weatherflow (Cloud)
        {% else %} None
        {%- endif %}
    availability: >
      {{ is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_forecast_precipitation_duration_today')) }}

  - name: "[Weather] Precipitation Duration Yesterday"
    unique_id: weather_precipitation_duration_yesterday
    icon: mdi:timer
    device_class: duration
    state_class: measurement
    unit_of_measurement: min
    state: >
      {% if is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_forecast_precipitation_duration_yesterday')) -%}
        {{ states('sensor.weatherflow_forecast_precipitation_duration_yesterday')|float }}
        {% else %} 0
      {%- endif %}
    attributes:
      category: weather
      provider: >
        {% if is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_forecast_precipitation_duration_yesterday')) -%} Weatherflow (Cloud)
        {% else %} None
        {%- endif %}
    availability: >
      {{ is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_forecast_precipitation_duration_yesterday')) }}

  - name: "[Weather] Precipitation Today"
    unique_id: weather_precipitation_today
    icon: mdi:weather-pouring
    device_class: precipitation
    state_class: measurement
    unit_of_measurement: mm
    state: >
      {%- if is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_forecast_precipitation_today')) %}
        {{ states('sensor.weatherflow_forecast_precipitation_today')|float|round(2) }}
        {% else %} 0
      {%- endif %}
    attributes:
      category: weather
      provider: >
        {% if is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_forecast_precipitation_today')) -%} Weatherflow (Cloud)
          {% else %} None
        {%- endif %}
    availability: >
      {{ is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_forecast_precipitation_today')) }}

  - name: "[Weather] Precipitation Yesterday"
    unique_id: weather_precipitation_yesterday
    icon: mdi:weather-pouring
    device_class: precipitation
    state_class: measurement
    unit_of_measurement: mm
    state: >
      {% if is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_forecast_precipitation_yesterday')) -%}
        {{ states('sensor.weatherflow_forecast_precipitation_yesterday')|float }}
      {%- elif is_state('binary_sensor.connected_bureau_of_meteorology', 'on')
          and is_number(states('sensor.east_tamworth_precipitation_yesterday')) %}
        {{ states('sensor.east_tamworth_precipitation_yesterday')|float|round(2) }}
      {% else %} 0
      {%- endif %}
    attributes:
      category: weather
      provider: >
        {% if is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_forecast_precipitation_yesterday')) -%} Weatherflow (Cloud)
        {%- elif is_state('binary_sensor.connected_bureau_of_meteorology', 'on')
          and is_number(states('sensor.east_tamworth_precipitation_yesterday')) %} Bureau of Meteorology
        {% else %} None
        {%- endif %}
    availability: >
      {{ is_state('binary_sensor.connected_weatherflow_cloud','on')
            and is_number(states('sensor.weatherflow_forecast_precipitation_yesterday'))
          or is_state('binary_sensor.connected_bureau_of_meteorology', 'on')
            and is_number(states('sensor.east_tamworth_precipitation_yesterday')) }}

  - name: "[Weather] Precipitation Type"
    unique_id: weather_precipitation_type
    icon: mdi:weather-rainy
    state: >
      {% set condition = states('sensor.weather_current_condition') %}
      {% if condition | contains('snow') %} snow
      {% elif condition | contains('rain')
          or condition | contains('pouring') %} rain
      {% else %} none
      {% endif %}
    attributes:
      category: weather
    availability: "{{ has_value('sensor.weather_current_condition') }}"

  - name: "[Weather] Next Precipitation, Start"
    unique_id: weather_next_precipitation_start
    icon: mdi:weather-rainy
    device_class: timestamp
    state: >
      {{ (state_attr('sensor.weather_forecasts', 'bom_hourly')
        | selectattr('condition', 'in', ['rainy', 'lightning-rainy'])
        | list | first | default).datetime | default("0")
      }}
    attributes:
      category: weather

  - name: "[Weather] Next Precipitation, End"
    unique_id: weather_next_precipitation_end
    icon: mdi:weather-rainy
    device_class: timestamp
    state: >
      {{ (state_attr('sensor.weather_forecasts', 'bom_hourly')
        | rejectattr('condition', 'in', ['rainy', 'lightning-rainy'])
        | selectattr('datetime', '>', states('sensor.weather_hourly_next_precipitation_start'))
        | list | first | default).datetime | default("0")
      }}
    attributes:
      category: weather

  - name: "[Weather] Precipitation Start (Next 12 Hours)"
    unique_id: weather_next_precipitation_start_next12hrs
    icon: mdi:weather-pouring
    device_class: timestamp
    state: >
      {%- set forecast = none %}
      {%- set time = namespace(value=none) %}
      {%- if state_attr('sensor.weather_forecasts', 'bom_hourly') != none %}
        {%- set forecast = state_attr('sensor.weather_forecasts', 'bom_hourly') %}
      {%- elif state_attr('sensor.weather_forecasts', 'weatherflow_hourly') != none %}
        {%- set forecast = state_attr('sensor.weather_forecasts', 'weatherflow_hourly') %}
      {%- elif state_attr('sensor.weather_forecasts', 'pirateweather_hourly') != none %}
        {%- set forecast = state_attr('sensor.weather_forecasts', 'pirateweather_hourly') %}
      {%- endif %}
      {%- if is_state('binary_sensor.weather_is_raining', 'on') %}
        {%- set time.value = states.binary_sensor.weather_is_raining.last_changed %}
      {%- elif forecast not in ['', none] %}
        {%- for item in forecast %}
          {%- if loop.index0 < 12
              and item.precipitation_probability | int(-1) >= 40
              and (item.condition | contains('rain')
                or item.condition | contains('snow')
                or item.condition | contains('storm')) %}
            {%- set time.value = item.datetime %}
          {%- break %}
          {%- endif %}
        {%- endfor %}
      {%- endif %}
      {{ time.value }}
    attributes:
      category: weather
      provider: >
        {%- if state_attr('sensor.weather_forecasts', 'bom_hourly') != none %}
          Bureau of Meteorology
        {%- elif state_attr('sensor.weather_forecasts', 'weatherflow_hourly') != none %}
          WeatherFlow (Cloud)
        {%- elif state_attr('sensor.weather_forecasts', 'pirateweather_hourly') != none %}
          Pirate Weather
        {%- endif %}
    availability: >
      {{ state_attr('sensor.weather_forecasts', 'bom_hourly') != none
          or state_attr('sensor.weather_forecasts', 'weatherflow_hourly') != none
          or state_attr('sensor.weather_forecasts', 'pirateweather_hourly') != none }}

  - name: "[Weather] Lightning Count"
    unique_id: weather_lightning_count
    icon: mdi:lightning-bolt
    state_class: measurement
    unit_of_measurement: "ϟ"
    state: >
      {% if is_state('binary_sensor.connected_blitzortung', 'on')
          and is_number(states('sensor.blitzortung_lightning_counter')) %}
        {{ states('sensor.blitzortung_lightning_counter') | int }}
      {% elif is_state('binary_sensor.connected_weatherflow_cloud', 'on')
          and is_number(states('sensor.weatherflow_forecast_lightnings_strikes')) %}
        {{ states('sensor.weatherflow_forecast_lightnings_strikes') | int }}
      {% endif %}
    attributes:
      category: weather
      provider: >
        {% if is_state('binary_sensor.connected_blitzortung', 'on')
            and is_number(states('sensor.blitzortung_lightning_counter')) %}
          Blitzortung
        {% elif is_state('binary_sensor.connected_weatherflow_cloud', 'on')
            and is_number(states('sensor.weatherflow_forecast_lightnings_strikes')) %}
          WeatherFlow Cloud
        {% endif %}
    availability: >
      {{ (is_state('binary_sensor.connected_blitzortung', 'on')
            and is_number(states('sensor.blitzortung_lightning_counter')))
          or (is_state('binary_sensor.connected_weatherflow_cloud', 'on')
            and is_number(states('sensor.weatherflow_forecast_lightnings_strikes'))) }}

  - name: "[Weather] Lightning Distance"
    unique_id: weather_lightning_distance
    icon: mdi:lightning-bolt
    device_class: distance
    state_class: measurement
    unit_of_measurement: km
    state: >
      {% if is_state('binary_sensor.connected_blitzortung', 'on')
          and is_number(states('sensor.blitzortung_lightning_distance')) %}
        {{ states('sensor.blitzortung_lightning_distance') | int }}
      {% elif is_state('binary_sensor.connected_weatherflow_cloud', 'on')
          and is_number(states('sensor.weatherflow_forecast_distance_last_lightning_strike')) %}
        {{ states('sensor.weatherflow_forecast_distance_last_lightning_strike') | int }}
      {% endif %}
    attributes:
      category: weather
      provider: >
        {% if is_state('binary_sensor.connected_blitzortung', 'on')
            and is_number(states('sensor.blitzortung_lightning_distance')) %}
          Blitzortung
        {% elif is_state('binary_sensor.connected_weatherflow_cloud', 'on')
            and is_number(states('sensor.weatherflow_forecast_distance_last_lightning_strike')) %}
          WeatherFlow Cloud
        {% endif %}
    availability: >
      {{ (is_state('binary_sensor.connected_blitzortung', 'on')
            and is_number(states('sensor.blitzortung_lightning_distance')))
          or (is_state('binary_sensor.connected_weatherflow_cloud', 'on')
            and is_number(states('sensor.weatherflow_forecast_distance_last_lightning_strike'))) }}

  - name: "[Weather] Lightning Last Strike"
    unique_id: weather_lightning_last_strike
    icon: mdi:clock-star-four-points
    device_class: timestamp
    state: "{{ states('sensor.weatherflow_forecast_time_of_last_lightning_strike') }}"
    availability: "{{ has_value('sensor.weatherflow_forecast_time_of_last_lightning_strike') }}"
    attributes:
      category: weather

  - name: "[Weather] Barometric Pressure"
    unique_id: weather_barometric_pressure
    device_class: pressure
    state_class: measurement
    unit_of_measurement: hPa
    state: >
      {% if is_state('binary_sensor.connected_weatherflow_local','on')
            and is_number(states('sensor.st_00056115_air_pressure')) -%}
        {{ states('sensor.st_00056115_air_pressure')|float }}
      {%- elif is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_forecast_barometric_pressure')) %}
        {{ states('sensor.weatherflow_forecast_barometric_pressure')|float }}
      {%- endif %}
    attributes:
      provider: >
        {% if is_state('binary_sensor.connected_weatherflow_local','on')
            and is_number(states('sensor.st_00056115_air_pressure')) -%} Weatherflow (Local)
        {%- elif is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_forecast_barometric_pressure')) %} Weatherflow (Cloud)
        {%- endif %}
    availability: >
      {{ is_state('binary_sensor.connected_weatherflow_cloud','on')
            and is_number(states('sensor.weatherflow_forecast_barometric_pressure'))
          or is_state('binary_sensor.connected_weatherflow_local','on')
            and is_number(states('sensor.st_00056115_air_pressure')) }}

  - name: "[Weather] Wind Speed"
    unique_id: weather_wind_speed
    icon: mdi:weather-windy
    device_class: wind_speed
    state_class: measurement
    unit_of_measurement: km/h
    state: >
      {% if is_state('binary_sensor.connected_bureau_of_meteorology', 'on')
          and is_number(states('sensor.tamworth_airport_wind_speed_kilometre')) -%}
        {{ states('sensor.tamworth_airport_wind_speed_kilometre')|float }}
      {%- elif is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_forecast_wind_speed')) %}
        {{ states('sensor.weatherflow_forecast_wind_speed')|float }}
      {%- elif is_state('binary_sensor.connected_weatherflow_local','on')
            and is_number(states('sensor.st_00056115_wind_speed')) %}
        {{ states('sensor.st_00056115_wind_speed')|float * 3.6 }}
      {%- endif %}
    attributes:
      category: weather
      provider: >
        {% if is_state('binary_sensor.connected_bureau_of_meteorology', 'on')
          and is_number(states('sensor.tamworth_airport_wind_speed_kilometre')) -%} Bureau of Meteorology
        {%- elif is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_forecast_wind_speed')) %} Weatherflow (Cloud)
        {%- elif is_state('binary_sensor.connected_weatherflow_local','on')
            and is_number(states('sensor.st_00056115_wind_speed')) %} Weatherflow (Local)
        {%- endif %}
    availability: >
      {{ is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_forecast_wind_speed'))
          or is_state('binary_sensor.connected_weatherflow_local','on')
            and is_number(states('sensor.st_00056115_wind_speed'))
          or is_state('binary_sensor.connected_bureau_of_meteorology', 'on')
            and is_number(states('sensor.tamworth_airport_wind_speed_kilometre')) }}

  - name: "[Weather] Wind Speed Today"
    unique_id: weather_wind_speed_today
    icon: mdi:weather-windy
    device_class: wind_speed
    state_class: measurement
    unit_of_measurement: km/h
    state: >
      {% if state_attr('sensor.weather_forecasts', 'weatherflow_daily')[0] is defined
          and state_attr('sensor.weather_forecasts', 'weatherflow_daily')[0].wind_speed is defined
          and is_number(state_attr('sensor.weather_forecasts', 'weatherflow_daily')[0]['wind_speed']) -%}
        {{ state_attr('sensor.weather_forecasts', 'weatherflow_daily')[0]['wind_speed'] | int(-1) }}
      {%- endif %}
    attributes:
      category: weather
      provider: >
        {% if state_attr('sensor.weather_forecasts', 'weatherflow_daily')[0] is defined
          and state_attr('sensor.weather_forecasts', 'weatherflow_daily')[0].wind_speed is defined
          and is_number(state_attr('sensor.weather_forecasts', 'weatherflow_daily')[0]['wind_speed']) -%} Weatherflow (Cloud)
        {%- endif %}
    availability: >
      {{ is_state('binary_sensor.connected_weatherflow_cloud','on')
            and state_attr('sensor.weather_forecasts', 'weatherflow_daily')[0] is defined
            and state_attr('sensor.weather_forecasts', 'weatherflow_daily')[0].wind_speed is defined
            and is_number(state_attr('sensor.weather_forecasts', 'weatherflow_daily')[0]['wind_speed']) }}

  - name: "[Weather] Wind Gust"
    unique_id: weather_wind_gust
    icon: mdi:weather-windy
    device_class: wind_speed
    state_class: measurement
    unit_of_measurement: km/h
    state: >
      {% if is_state('binary_sensor.connected_bureau_of_meteorology', 'on')
          and is_number(states('sensor.tamworth_airport_gust_speed_kilometre')) -%}
        {{ states('sensor.tamworth_airport_gust_speed_kilometre')|float }}
      {%- elif is_state('binary_sensor.connected_weatherflow_local','on')
            and is_number(states('sensor.st_00056115_wind_gust')) %}
        {{ states('sensor.st_00056115_wind_gust')|float * 3.6 }}
      {%- elif is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_forecast_wind_gust')) %}
        {{ states('sensor.weatherflow_forecast_wind_gust')|float }}
      {%- endif %}
    attributes:
      category: weather
      provider: >
        {% if is_state('binary_sensor.connected_bureau_of_meteorology', 'on')
          and is_number(states('sensor.tamworth_airport_gust_speed_kilometre')) -%} Bureau of Meteorology
        {%- elif is_state('binary_sensor.connected_weatherflow_local','on')
            and is_number(states('sensor.st_00056115_wind_gust')) %} Weatherflow (Local)
        {%- elif is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_forecast_wind_gust')) %} Weatherflow (Cloud)
        {%- endif %}
    availability: >
      {{ is_state('binary_sensor.connected_weatherflow_local','on')
            and is_number(states('sensor.st_00056115_wind_gust'))
          or is_state('binary_sensor.connected_weatherflow_cloud','on')
            and is_number(states('sensor.weatherflow_forecast_wind_gust'))
          or is_state('binary_sensor.connected_bureau_of_meteorology', 'on')
            and is_number(states('sensor.tamworth_airport_gust_speed_kilometre')) }}

  - name: "[Weather] Wind Gust Today"
    unique_id: weather_wind_gust_today
    icon: mdi:weather-windy
    device_class: wind_speed
    state_class: measurement
    unit_of_measurement: km/h
    state: >
      {%- if is_state('binary_sensor.connected_pirateweather', 'on')
          and is_number(states('sensor.pirateweather_wind_gust_0d')) %}
        {{ states('sensor.pirateweather_wind_gust_0d')|int(none) }}
      {%- endif %}
    attributes:
      category: weather
      provider: Pirate Weather
    availability: >
      {{ is_state('binary_sensor.connected_pirateweather', 'on')
          and is_number(states('sensor.pirateweather_wind_gust_0d')) }}

  - name: "[Weather] Wind Lull"
    unique_id: weather_wind_lull
    icon: mdi:weather-windy
    device_class: wind_speed
    state_class: measurement
    unit_of_measurement: km/h
    state: >
      {% if is_state('binary_sensor.connected_weatherflow_local','on')
            and is_number(states('sensor.st_00056115_wind_lull')) -%}
        {{ states('sensor.st_00056115_wind_lull')|float * 3.6 }}
      {%- elif is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_forecast_wind_lull')) %}
        {{ states('sensor.weatherflow_forecast_wind_lull')|float }}
      {%- endif %}
    attributes:
      category: weather
      provider: >
        {% if is_state('binary_sensor.connected_weatherflow_local','on')
            and is_number(states('sensor.st_00056115_wind_lull')) -%} Weatherflow (Local)
        {%- elif is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_forecast_wind_lull')) %} Weatherflow (Cloud)
        {%- endif %}
    availability: >
      {{ is_state('binary_sensor.connected_weatherflow_local','on')
            and is_number(states('sensor.st_00056115_wind_lull'))
          or is_state('binary_sensor.connected_weatherflow_cloud','on')
            and is_number(states('sensor.weatherflow_forecast_wind_lull')) }}

  - name: "[Weather] Wind Bearing"
    unique_id: weather_wind_bearing
    state_class: measurement
    unit_of_measurement: °
    state: >
      {%- if is_state('binary_sensor.connected_weatherflow_local','on')
            and is_number(states('sensor.st_00056115_wind_direction')) -%}
        {{ states('sensor.st_00056115_wind_direction')|float }}
      {%- elif is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_forecast_wind_direction')) %}
        {{ states('sensor.weatherflow_forecast_wind_direction')|float }}
      {%- elif is_state('binary_sensor.connected_bureau_of_meteorology', 'on')
          and is_number(states('sensor.tamworth_airport_wind_direction')) %}
        {{ states('sensor.tamworth_airport_wind_direction') }}
      {%- endif %}
    attributes:
      category: weather
      cardinal: >
        {%- set directions = ['N','NNE','NE','ENE','E','ESE','SE','SSE','S','SSW','SW','WSW','W','WNW','NW','NNW','N'] %}
        {{ directions[((states('sensor.weather_wind_bearing')|float(-1)/360)|float*16)|round] }}
      full_cardinal: >
        {%- set directions = ['North','North-Northeast','Northeast','East-Northeast','East','East-Southeast',
            'Southeast','South-Southeast','South','South-Southwest','Southwest','West-Southwest','West',
            'West-Northwest','Northwest','North-Northwest','North'] %}
        {{ directions[((states('sensor.weather_wind_bearing')|float(-1)/360)|float*16)|round] }}
      provider: >
        {% if is_number(states('sensor.st_00056115_wind_direction')) -%} Weatherflow (Local)
        {%- elif is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_forecast_wind_direction')) %} Weatherflow (Cloud)
        {%- elif is_number(states('sensor.tamworth_airport_wind_direction')) %} Bureau of Meteorology
        {%- endif %}
    availability: >
      {{ is_state('binary_sensor.connected_weatherflow_local','on')
            and is_number(states('sensor.st_00056115_wind_direction'))
          or is_state('binary_sensor.connected_weatherflow_cloud','on')
            and is_number(states('sensor.weatherflow_forecast_wind_direction'))
          or is_state('binary_sensor.connected_bureau_of_meteorology', 'on')
            and is_number(states('sensor.tamworth_airport_wind_direction')) }}

  - name: "[Weather] Wind Beaufort Display"
    unique_id: weather_wind_beaufort_display
    icon: mdi:windsock
    state: >
      {% if is_state('binary_sensor.connected_weatherflow_cloud','on')
          and has_value('sensor.weatherflow_forecast_beaufort_description') -%}
        {{ states('sensor.weatherflow_forecast_beaufort_description')|replace('_',' ')|title }}
      {%- endif %}
    attributes:
      category: weather
      provider: Weatherflow (Cloud)
    availability: >
      {{ is_state('binary_sensor.connected_weatherflow_cloud', 'on')
          and has_value('sensor.weatherflow_forecast_beaufort_description') }}

  - name: "[Weather] Visibility"
    unique_id: weather_visibility
    icon: mdi:eye
    device_class: distance
    state_class: measurement
    unit_of_measurement: km
    state: >
      {%- if is_state('binary_sensor.connected_weatherflow_cloud','on')
            and is_number(states('sensor.weatherflow_forecast_visibility')) %}
        {{ states('sensor.weatherflow_forecast_visibility')|float|round(3) }}
      {%- endif %}
    attributes:
      category: weather
      provider: >
        {%- if is_state('binary_sensor.connected_weatherflow_cloud','on')
            and is_number(states('sensor.weatherflow_forecast_visibility')) %} Weatherflow (Cloud)
        {%- endif %}
    availability: >
      {{ is_state('binary_sensor.connected_weatherflow_cloud','on')
            and is_number(states('sensor.weatherflow_forecast_visibility')) }}

  - name: "[Weather] Nearest Storm Bearing"
    unique_id: weather_nearest_storm_bearing
    state: >
      {%- if is_state('binary_sensor.connected_pirateweather', 'on')
          and has_value('sensor.pirateweather_nearest_storm_bearing') %}
        {{ states('sensor.pirateweather_nearest_storm_bearing')|float(none) }}
      {%- endif %}
    state_class: measurement
    unit_of_measurement: "°"
    attributes:
      category: weather
      provider: Pirate Weather
    availability: >
      {{ is_state('binary_sensor.connected_pirateweather', 'on')
          and is_number(states('sensor.pirateweather_nearest_storm_bearing')) }}

  - name: "[Weather] Nearest Storm Distance"
    unique_id: weather_nearest_storm_distance
    device_class: distance
    state_class: measurement
    unit_of_measurement: km
    state: >
      {%- if is_state('binary_sensor.connected_pirateweather', 'on')
          and has_value('sensor.pirateweather_nearest_storm_distance') %}
        {{ states('sensor.pirateweather_nearest_storm_distance')|int(none) }}
      {%- endif %}
    attributes:
      category: weather
      provider: Pirate Weather
    availability: >
      {{ is_state('binary_sensor.connected_pirateweather', 'on')
          and is_number(states('sensor.pirateweather_nearest_storm_distance')) }}

  - name: "[Weather] Storm Full Direction"
    unique_id: weather_storm_full_direction
    state: >
      {% set directions = ['North','North-Northeast','Northeast','East-Northeast','East','East-Southeast',
          'Southeast','South-Southeast','South','South-Southwest','Southwest','West-Southwest','West',
          'West-Northwest','Northwest','North-Northwest','North'] -%}
      {% set dir = states('sensor.weather_nearest_storm_bearing') -%}
      {{ iif(is_number(dir),directions[((dir|float(-1)/360)|float*16)|round],'unknown') }}
    attributes:
      category: weather
      provider: "{{ state_attr('sensor.weather_nearest_storm_bearing','provider') }}"
    availability: "{{ is_number(states('sensor.weather_nearest_storm_bearing')) }}"

  - name: "[Weather] Cloud Cover"
    unique_id: weather_cloud_cover
    icon: mdi:cloud
    state_class: measurement
    unit_of_measurement: "%"
    state: >
      {%- if is_state('binary_sensor.connected_pirateweather', 'on')
          and has_value('sensor.pirateweather_cloud_coverage') %}
        {{ states('sensor.pirateweather_cloud_coverage')|int(none) }}
      {%- endif %}
    attributes:
      description: >
        {% set cloud = states('sensor.weather_cloud_cover') | int %}
        {%- if cloud > 80 %} Cloudy
        {%- elif cloud > 50 %} Mostly Cloudy
        {%- elif cloud > 10 %} Partly Cloudy
        {%- else %} Clear
        {%- endif %}
      category: weather
      provider: Pirate Weather
    availability: >
      {{ is_state('binary_sensor.connected_pirateweather', 'on')
          and is_number(states('sensor.pirateweather_cloud_coverage')) }}

  - name: "[Weather] Cloud Cover Today"
    unique_id: weather_cloud_cover_today
    icon: mdi:cloud
    state_class: measurement
    unit_of_measurement: "%"
    state: >
      {%- if is_state('binary_sensor.connected_pirateweather', 'on')
          and has_value('sensor.pirateweather_cloud_coverage_0d') %}
        {{ states('sensor.pirateweather_cloud_coverage_0d')|int(none) }}
      {%- endif %}
    attributes:
      category: weather
      provider: Pirate Weather
    availability: >
      {{ is_state('binary_sensor.connected_pirateweather', 'on')
          and is_number(states('sensor.pirateweather_cloud_coverage_0d')) }}

  - name: "[Weather] Illuminance"
    unique_id: weather_illuminance
    icon: mdi:brightness-7
    device_class: illuminance
    state_class: measurement
    unit_of_measurement: lx
    state: >
      {%- if is_state('binary_sensor.connected_weatherflow_local','on')
            and is_number(states('sensor.st_00056115_illuminance')) %}
        {{ states('sensor.st_00056115_illuminance')|float -}}
      {%- elif is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_forecast_illuminance')) %}
        {{ states('sensor.weatherflow_forecast_illuminance')|float }}
      {%- endif %}
    attributes:
      category: weather
      provider: >
        {% if is_state('binary_sensor.connected_weatherflow_local','on')
            and is_number(states('sensor.st_00056115_illuminance')) -%} Weatherflow (Local)
        {%- elif is_state('binary_sensor.connected_weatherflow_cloud','on')
          and is_number(states('sensor.weatherflow_forecast_visibility')) %} Weatherflow (Cloud)
        {%- endif %}
    availability: >
      {{ is_state('binary_sensor.connected_weatherflow_cloud','on')
            and is_number(states('sensor.weatherflow_forecast_illuminance'))
          or is_state('binary_sensor.connected_weatherflow_local','on')
            and is_number(states('sensor.st_00056115_illuminance')) }}

  - name: "[Weather] Future Temperature - Above 25"
    unique_id: weather_future_temperature_above_25
    icon: mdi:weather-rainy
    state: >
      {%- set ns = namespace(high_temp = 25, cnt = 0) %}
      {%- set current_date = (now() | as_timestamp) | timestamp_custom("%d.%m.%Y") %}
      {%- for forecast in state_attr('sensor.weather_forecasts','weatherflow_hourly') %}
          {%- if forecast.temperature > ns.high_temp %}
            {%- set ns.cnt = ns.cnt + 1 %}
          {%- endif %}
      {%- endfor %}
      {{ ns.cnt }}
    unit_of_measurement: Intervals
    attributes:
      category: weather
      availability: >
        {{ state_attr('sensor.weather_forecasts','weatherflow_hourly')[0] is defined }}
      provider: >
        "Weatherflow"
      intervals: >
        {%- set ns = namespace(high_temp = 25, list = []) %}
        {%- set current = [] %}
        {%- set current_date = (now() | as_timestamp) | timestamp_custom("%d.%m.%Y") %}
        {%- for forecast in state_attr('sensor.weather_forecasts','weatherflow_hourly') %}
        {%- if forecast.temperature > ns.high_temp %}
          {%- set new = [{
          "date": as_timestamp(forecast.datetime) | timestamp_custom('%A %b %-d'),
          "time": as_timestamp(forecast.datetime) | timestamp_custom('%H:00'),
          "temperature": forecast.temperature|round(0)}] %}
        {%- set ns.list = ns.list + new %}
        {%- endif %}
        {%- endfor %}
        {{ ns.list }}

  - name: "[Weather] Future Temperature - Above 30"
    unique_id: weather_future_temperature_above_30
    icon: mdi:weather-rainy
    state: >
      {%- set ns = namespace(high_temp = 30, cnt = 0) %}
      {%- set current_date = (now() | as_timestamp) | timestamp_custom("%d.%m.%Y") %}
      {%- for forecast in state_attr('sensor.weather_forecasts','weatherflow_hourly') %}
          {%- if forecast.temperature > ns.high_temp %}
            {%- set ns.cnt = ns.cnt + 1 %}
          {%- endif %}
      {%- endfor %}
      {{ ns.cnt }}
    unit_of_measurement: Intervals
    attributes:
      category: weather
      availability: >
        {{ state_attr('sensor.weather_forecasts','weatherflow_hourly')[0] is defined }}
      provider: >
        WeatherFlow
      intervals: >
        {%- set ns = namespace(high_temp = 30, list = []) %}
        {%- set current = [] %}
        {%- set current_date = (now() | as_timestamp) | timestamp_custom("%d.%m.%Y") %}
        {%- for forecast in state_attr('sensor.weather_forecasts','weatherflow_hourly') %}
        {%- if forecast.temperature > ns.high_temp %}
          {%- set new = [{
          "date": as_timestamp(forecast.datetime) | timestamp_custom('%A %b %-d'),
          "time": as_timestamp(forecast.datetime) | timestamp_custom('%H:00'),
          "temperature": forecast.temperature|round(0)}] %}
        {%- set ns.list = ns.list + new %}
        {%- endif %}
        {%- endfor %}
        {{ ns.list }}

  - name: "[Weather] Future Temperature - Below 10"
    unique_id: weather_future_temperature_below_10
    icon: mdi:weather-rainy
    state: >
      {%- set ns = namespace(high_temp = 10, cnt = 0) %}
      {%- set current_date = (now() | as_timestamp) | timestamp_custom("%d.%m.%Y") %}
      {%- for forecast in state_attr('sensor.weather_forecasts','weatherflow_hourly') %}
          {%- if forecast.temperature < ns.high_temp %}
            {%- set ns.cnt = ns.cnt + 1 %}
          {%- endif %}
      {%- endfor %}
      {{ ns.cnt }}
    unit_of_measurement: Intervals
    attributes:
      category: weather
      availability: >
        {{ state_attr('sensor.weather_forecasts','weatherflow_hourly')[0] is defined }}
      provider: >
        WeatherFlow
      intervals: >
        {%- set ns = namespace(high_temp = 10, list = []) %}
        {%- set current = [] %}
        {%- set current_date = (now() | as_timestamp) | timestamp_custom("%d.%m.%Y") %}
        {%- for forecast in state_attr('sensor.weather_forecasts','weatherflow_hourly') %}
        {%- if forecast.temperature < ns.high_temp %}
          {%- set new = [{
          "date": as_timestamp(forecast.datetime) | timestamp_custom('%A %b %-d'),
          "time": as_timestamp(forecast.datetime) | timestamp_custom('%H:00'),
          "temperature": forecast.temperature|round(0)}] %}
        {%- set ns.list = ns.list + new %}
        {%- endif %}
        {%- endfor %}
        {{ ns.list }}

  # - name: "[Weather] Fog Probability Today"
  #   unique_id: weather_fog_probability_today
  #   icon: mdi:weather-fog
  #   state_class: measurement
  #   unit_of_measurement: "%"
  #   state: >
  #     {{ states('sensor.tempest_st_00056115_fog_probability') }}
  #   attributes:
  #     category: weather
  #     provider: Weatherflow (Local)
  #   availability: >
  #     {{ is_number(states('sensor.tempest_st_00056115_fog_probability')) }}

  - name: "[Weather] Fair Weather Percentage"
    unique_id: weather_fair_weather_percentage
    state: >-
      {{ min((states('sensor.weather_fair_weather') | float(0) / states('sensor.tbsmarthome_sun_daylight') | float(0) * 100) | round(2), 100) if has_value('sensor.tbsmarthome_sun_daylight') else 0 }}
    unit_of_measurement: "%"
    attributes:
      category: weather

  - name: "[Weather] UV Index"
    unique_id: weather_uv_index
    icon: mdi:weather-sunny-alert
    state_class: measurement
    unit_of_measurement: UVi
    state: >
      {% if is_state('binary_sensor.connected_weatherflow_local','on')
            and is_number(states('sensor.st_00056115_uv_index')) -%}
        {{ states('sensor.st_00056115_uv_index')|float }}
      {%- elif is_state('binary_sensor.connected_weatherflow_cloud','on')
            and is_number(states('sensor.weatherflow_forecast_uv_index')) %}
        {{ states('sensor.weatherflow_forecast_uv_index')|float }}
      {%- elif is_state('binary_sensor.connected_openuv', 'on')
            and is_number(states('sensor.current_uv_index')) %}
        {{ states('sensor.current_uv_index')|float }}
      {%- elif is_state('binary_sensor.connected_pirateweather', 'on')
          and is_number(states('sensor.pirateweather_uv_index')) %}
        {{ states('sensor.pirateweather_uv_index')|float }}
      {%- endif %}
    attributes:
      category: weather
      risk: >
        {% set level = states(this.entity_id)|int(0) %}
        {% if is_number(level) %}
          {% if level < 3 %} Low
          {% elif level < 5 %} Moderate
          {% elif level < 7 %} Moderate High
          {% elif level < 9 %} High
          {% else %} Very High
          {% endif %}
        {% endif %}
      provider: >
        {% if is_state('binary_sensor.connected_weatherflow_local','on')
            and is_number(states('sensor.st_00056115_uv_index')) -%} Weatherflow (Local)
        {%- elif is_state('binary_sensor.connected_weatherflow_cloud','on')
            and is_number(states('sensor.weatherflow_forecast_uv_index')) %} Weatherflow (Cloud)
        {%- elif is_state('binary_sensor.connected_openuv', 'on')
            and is_number(states('sensor.current_uv_index')) %} OpenUV
        {%- elif is_state('binary_sensor.connected_pirateweather', 'on')
            and is_number(states('sensor.pirateweather_uv_index')) %} Pirate Weather
        {%- endif %}
    availability: >
      {{ is_state('binary_sensor.connected_weatherflow_local','on')
            and is_number(states('sensor.st_00056115_uv_index'))
          or is_state('binary_sensor.connected_weatherflow_cloud','on')
            and is_number(states('sensor.weatherflow_forecast_uv_index'))
          or is_state('binary_sensor.connected_pirateweather', 'on')
            and is_number(states('sensor.pirateweather_uv_index'))
          or is_state('binary_sensor.connected_openuv', 'on')
            and is_number(states('sensor.current_uv_index')) }}
